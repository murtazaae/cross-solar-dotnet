using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;
using CrossSolar.Domain;
using CrossSolar.Models;
using CrossSolar.Repository;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace CrossSolar.Controllers
{
    [Route("panel")]
    public class AnalyticsController : Controller
    {
        private readonly IAnalyticsRepository _analyticsRepository;

        private readonly IPanelRepository _panelRepository;

        public AnalyticsController(IAnalyticsRepository analyticsRepository, IPanelRepository panelRepository)
        {
            _analyticsRepository = analyticsRepository;
            _panelRepository = panelRepository;
        }

        // GET panel/XXXX1111YYYY2222/analytics
        [HttpGet("{panelId}/[controller]")]
        public async Task<IActionResult> Get([FromRoute, StringLength(16), Required] string panelId)
        {
            var panel = await _panelRepository.Query()
                .FirstOrDefaultAsync(x => x.Serial.Equals(panelId, StringComparison.CurrentCultureIgnoreCase));

            if (panel == null) return NotFound();

            var analytics = await _analyticsRepository.Query()
                .Where(x => x.PanelId.Equals(panelId, StringComparison.CurrentCultureIgnoreCase)).ToListAsync();

            var result = new OneHourElectricityListModel
            {
                OneHourElectricitys = analytics.Select(c => new OneHourElectricityModel
                {
                    Id = c.Id,
                    KiloWatt = c.KiloWatt,
                    DateTime = c.DateTime
                })
            };

            return Ok(result);
        }

        // GET panel/XXXX1111YYYY2222/analytics/day
        [HttpGet("{panelId}/[controller]/day")]
        public async Task<IActionResult> DayResults([FromRoute, StringLength(16), Required] string panelId)
        {
            // BUG FIX - Check Exists Panel
            if (!_panelRepository.Query().Any(x => x.Serial.Equals(panelId, StringComparison.CurrentCultureIgnoreCase)))
                return BadRequest();

            /* BUG FIX - Return Historical
             3) Frontend team wants to display panel’s all historical data in a chart, 
             in which each point represents electricity generated by this panel 
             each day [sum, min, max, average] up to the end of previous day , 
             your goal is to implement backend part of this task, API specifications 
             already there in code as agreed with Frontend team, and it is ok to implement 
             this task without any optimization.
            */
            var statisticsList = await _analyticsRepository.Query()
                .Where(x => x.PanelId.Equals(panelId, StringComparison.CurrentCultureIgnoreCase)).Select(
                    x => new
                    {
                        DateTime = new DateTime(x.DateTime.Year, x.DateTime.Month, x.DateTime.Day, 0, 0, 0),
                        KiloWatt = x.KiloWatt
                    }).GroupBy(p => p.DateTime).Select(
                        g => new OneDayElectricityModel()
                        {
                            DateTime = g.Key,
                            Sum = g.Sum(s => s.KiloWatt),
                            Average = g.Average(a => a.KiloWatt),
                            Minimum = g.Min(m => m.KiloWatt),
                            Maximum = g.Max(m => m.KiloWatt)
                        }
                    ).OrderBy(o => o.DateTime).ToListAsync();

            return Ok(statisticsList);
        }

        // POST panel/XXXX1111YYYY2222/analytics
        [HttpPost("{panelId}/[controller]")]
        public async Task<IActionResult> Post([FromRoute, StringLength(16), Required] string panelId, [FromBody] OneHourElectricityModel value)
        {
            if (!ModelState.IsValid) return BadRequest(ModelState);

            // BUG FIX - Check Exists Panel
            if (!_panelRepository.Query().Any(x => x.Serial.Equals(panelId, StringComparison.CurrentCultureIgnoreCase)))
                return BadRequest();

            var oneHourElectricityContent = new OneHourElectricity
            {
                PanelId = panelId,
                KiloWatt = value.KiloWatt,
                DateTime = DateTime.UtcNow
            };

            await _analyticsRepository.InsertAsync(oneHourElectricityContent);

            var result = new OneHourElectricityModel
            {
                Id = oneHourElectricityContent.Id,
                KiloWatt = oneHourElectricityContent.KiloWatt,
                DateTime = oneHourElectricityContent.DateTime
            };

            return Created($"panel/{panelId}/analytics/{result.Id}", result);
        }

        // POST panel/v2/XXXX1111YYYY2222/analytics
        [HttpPost("v2/{panelId}/[controller]")]
        public async Task<IActionResult> Post([FromRoute, StringLength(16), Required] string panelId, [FromBody] OneHourElectricityAmountModel value)
        {
            if (!ModelState.IsValid) return BadRequest(ModelState);

            if (!_panelRepository.Query().Any(x => x.Serial.Equals(panelId, StringComparison.CurrentCultureIgnoreCase)))
                return BadRequest();

            double amountKiloWatt = 0;
            switch (value.TypeWatt)
            {
                case UnitTypeWatt.KiloWatt:
                    amountKiloWatt = value.Amount;
                    break;

                case UnitTypeWatt.Watt:
                    amountKiloWatt = value.Amount / 1000;
                    break;
            }

            var oneHourElectricityContent = new OneHourElectricity
            {
                PanelId = panelId,
                KiloWatt = amountKiloWatt,
                DateTime = DateTime.UtcNow
            };

            await _analyticsRepository.InsertAsync(oneHourElectricityContent);

            var result = new OneHourElectricityAmountModel
            {
                Id = oneHourElectricityContent.Id,
                Amount = oneHourElectricityContent.KiloWatt,
                TypeWatt = UnitTypeWatt.KiloWatt,
                DateTime = oneHourElectricityContent.DateTime
            };

            return Created($"panel/v2/{panelId}/analytics/{result.Id}", result);
        }
    }
}